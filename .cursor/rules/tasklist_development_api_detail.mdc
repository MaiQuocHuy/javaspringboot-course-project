# KTC Learning Platform API: Detailed Requirements, Design, and Tasklist

## Overview

This document details the requirements, design, and implementation tasks for each API endpoint, organized by user role: **Student**, **Instructor**, and **Admin**. Each section includes:

- Functional requirements
- API design (endpoints, request/response, security)
- Implementation tasklist

---

## 1. Student APIs

### 1.1 Functional Requirements

- Browse and search published courses
- Enroll in courses and view enrolled courses
- View course curriculum, sections, and lessons
- Track and update learning progress
- Take quizzes and view results
- Submit and manage course reviews
- Make payments and request refunds

### 1.2 API Design

#### Endpoints

- `GET /api/courses/public` — List published courses
- `GET /api/courses/:id` — Course details
- `GET /api/courses/:id/curriculum` — Course curriculum (sections/lessons)
- `POST /api/courses/:id/enroll` — Enroll in course
- `GET /api/courses/enrolled` — List enrolled courses
- `GET /api/courses/:id/progress` — Course progress
- `GET /api/courses/:courseId/sections` — List sections
- `GET /api/sections/:sectionId/lessons` — List lessons in section
- `GET /api/lessons/:id` — Lesson content
- `POST /api/lessons/:id/complete` — Mark lesson complete
- `GET /api/lessons/:id/quiz` — Get quiz questions
- `POST /api/lessons/:id/quiz/submit` — Submit quiz answers
- `GET /api/lessons/:id/quiz/result` — Get quiz result
- `POST /api/courses/:id/review` — Submit review
- `GET /api/courses/:id/reviews` — List reviews
- `PUT /api/reviews/:id` — Update review
- `DELETE /api/reviews/:id` — Delete review
- `POST /api/payments` — Make payment
- `GET /api/payments` — Payment history
- `GET /api/payments/:id` — Payment details
- `POST /api/payments/:id/refund` — Request refund

#### Security & Validation

- JWT authentication required
- Role: STUDENT
- Validate course/lesson existence, enrollment status, payment status, review ownership, etc.

#### Request/Response Design

- Use DTOs for requests and responses
- Standardized API response format (success, data, message, timestamp)
- Pagination for list endpoints

### 1.3 Tasklist

- [ ] Define Student API endpoints in controller
- [ ] Implement service methods for each endpoint
- [ ] Add request/response DTOs
- [ ] Add validation (enrollment, ownership, etc.)
- [ ] Integrate with payment gateway
- [ ] Implement quiz logic and result calculation
- [ ] Add review CRUD logic
- [ ] Write unit and integration tests
- [ ] Secure endpoints with role-based access
- [ ] Document endpoints (Swagger)

---

## 2. Instructor APIs

### 2.1 Functional Requirements

- Create, update, delete, and manage own courses
- Manage sections and lessons within courses
- Upload and manage course content (videos, documents)
- Create and manage quizzes for lessons
- View analytics for own courses (enrollments, earnings, student progress)

### 2.2 API Design

#### Endpoints

- `GET /api/instructor/courses` — List own courses
- `POST /api/instructor/courses` — Create course
- `GET /api/instructor/courses/:id` — Course details
- `PUT /api/instructor/courses/:id` — Update course
- `DELETE /api/instructor/courses/:id` — Delete course
- `POST /api/instructor/courses/:id/publish` — Publish course
- `POST /api/instructor/courses/:id/unpublish` — Unpublish course
- `GET /api/instructor/courses/:courseId/sections` — List sections
- `POST /api/instructor/courses/:courseId/sections` — Create section
- `GET /api/instructor/sections/:id` — Section details
- `PUT /api/instructor/sections/:id` — Update section
- `DELETE /api/instructor/sections/:id` — Delete section
- `PUT /api/instructor/sections/:id/reorder` — Reorder sections
- `GET /api/instructor/sections/:sectionId/lessons` — List lessons
- `POST /api/instructor/sections/:sectionId/lessons` — Create lesson
- `GET /api/instructor/lessons/:id` — Lesson details
- `PUT /api/instructor/lessons/:id` — Update lesson
- `DELETE /api/instructor/lessons/:id` — Delete lesson
- `PUT /api/instructor/lessons/:id/reorder` — Reorder lessons
- `POST /api/instructor/lessons/:lessonId/quiz` — Create quiz
- `GET /api/instructor/lessons/:lessonId/quiz` — View quiz
- `PUT /api/instructor/quiz/:id` — Update quiz question
- `DELETE /api/instructor/quiz/:id` — Delete quiz question
- `POST /api/instructor/upload/video` — Upload video
- `POST /api/instructor/upload/document` — Upload document
- `DELETE /api/instructor/content/:id` — Delete content
- `GET /api/instructor/analytics/courses` — Course analytics
- `GET /api/instructor/analytics/earnings` — Earnings overview
- `GET /api/instructor/analytics/enrollments` — Enrollment stats
- `GET /api/instructor/analytics/student-progress` — Student progress

#### Security & Validation

- JWT authentication required
- Role: INSTRUCTOR
- Validate course/section/lesson ownership
- File upload validation (type, size)

#### Request/Response Design

- Use DTOs for requests and responses
- Standardized API response format
- Pagination for analytics endpoints

### 2.3 Tasklist

- [ ] Define Instructor API endpoints in controller
- [ ] Implement service methods for each endpoint
- [ ] Add request/response DTOs
- [ ] Add validation (ownership, file type, etc.)
- [ ] Implement file upload logic
- [ ] Implement quiz and content management
- [ ] Add analytics logic (enrollments, earnings, progress)
- [ ] Write unit and integration tests
- [ ] Secure endpoints with role-based access
- [ ] Document endpoints (Swagger)

---

## 3. Admin APIs

### 3.1 Functional Requirements

- Manage all users (view, update, delete, ban/unban, assign roles)
- Approve or reject courses and instructor applications
- Manage all courses, categories, and reviews
- View and manage platform revenue, payments, and refunds
- Access platform-wide analytics and reporting

### 3.2 API Design

#### Endpoints

- `GET /api/admin/users` — List all users
- `GET /api/admin/users/:id` — User details
- `PUT /api/admin/users/:id` — Update user
- `DELETE /api/admin/users/:id` — Delete user
- `PUT /api/admin/users/:id/roles` — Update user roles
- `POST /api/admin/users/:id/ban` — Ban user
- `POST /api/admin/users/:id/unban` — Unban user
- `GET /api/admin/courses/pending` — Pending courses
- `GET /api/admin/courses` — All courses
- `GET /api/admin/courses/:id` — Course details
- `POST /api/admin/courses/:id/approve` — Approve course
- `POST /api/admin/courses/:id/reject` — Reject course
- `PUT /api/admin/courses/:id` — Update course
- `DELETE /api/admin/courses/:id` — Delete course
- `GET /api/admin/courses/:id/reviews` — Course reviews
- `GET /api/admin/instructors/applications` — Instructor applications
- `GET /api/admin/instructors/applications/:id` — Application details
- `POST /api/admin/instructors/applications/:id/approve` — Approve instructor
- `POST /api/admin/instructors/applications/:id/reject` — Reject instructor
- `GET /api/admin/instructors` — All instructors
- `PUT /api/admin/instructors/:id/status` — Update instructor status
- `GET /api/admin/revenue/overview` — Revenue overview
- `GET /api/admin/revenue/courses` — Course revenue
- `GET /api/admin/revenue/instructors` — Instructor earnings
- `GET /api/admin/revenue/payments` — Payment history
- `GET /api/admin/revenue/refunds` — Refund requests
- `POST /api/admin/revenue/refunds/:id/process` — Process refund
- `GET /api/admin/revenue/analytics` — Financial analytics
- `GET /api/admin/categories` — All categories
- `POST /api/admin/categories` — Create category
- `PUT /api/admin/categories/:id` — Update category
- `DELETE /api/admin/categories/:id` — Delete category
- `GET /api/admin/analytics/overview` — Platform overview
- `GET /api/admin/analytics/users` — User analytics
- `GET /api/admin/analytics/courses` — Course analytics
- `GET /api/admin/analytics/enrollments` — Enrollment analytics
- `GET /api/admin/analytics/revenue` — Revenue analytics

#### Security & Validation

- JWT authentication required
- Role: ADMIN
- Strict input validation and audit logging

#### Request/Response Design

- Use DTOs for requests and responses
- Standardized API response format
- Pagination for list endpoints

### 3.3 Tasklist

- [ ] Define Admin API endpoints in controller
- [ ] Implement service methods for each endpoint
- [ ] Add request/response DTOs
- [ ] Add validation (input, business rules)
- [ ] Implement course and instructor approval logic
- [ ] Implement revenue and analytics logic
- [ ] Write unit and integration tests
- [ ] Secure endpoints with role-based access
- [ ] Document endpoints (Swagger)

---

## 4. Common Tasks

- [ ] Set up global exception handling and error responses
- [ ] Implement API documentation (Swagger/OpenAPI)
- [ ] Add integration and end-to-end tests for all roles
- [ ] Ensure security best practices (RBAC, input validation, rate limiting)
- [ ] Monitor and log API usage and errors

---

## Notes

- All endpoints must follow RESTful conventions
- Use consistent naming and versioning (`/api/v1/...` if needed)
- Ensure all sensitive actions are protected by role-based access control
- Document all endpoints and data models
  description:
  globs:
  alwaysApply: false

---
